import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';
import { setRequestLocale } from 'next-intl/server';
import { notFound } from 'next/navigation';
import { routing } from '@/i18n/routing';
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

// Load fonts
const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// Default metadata for all pages
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};



// Export static params for Next.js to pre-render each locale
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

type AvailableLocale = (typeof routing.locales)[number];

export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  // `params` is declared as a Promise of the object.
  params: Promise<{ locale: AvailableLocale }>;
}) {
  // Await it before using its properties.
  const { locale } = await params;

  // Validate the locale
  if (!routing.locales.includes(locale)) {
    notFound();
  }

  // Enable static rendering for this locale
  setRequestLocale(locale);

  // Load locale-specific messages.
  const messages = await getMessages();

  return (
    <html lang={locale}>
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased`}>
        <NextIntlClientProvider messages={messages}>
          <section id='body'>
            {children}
          </section>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
