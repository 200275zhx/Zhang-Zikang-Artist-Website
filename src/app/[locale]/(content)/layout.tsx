// import { setRequestLocale } from 'next-intl/server';
// import { notFound } from 'next/navigation';
// import { routing } from '@/i18n/routing';
// import type { Metadata } from "next";

// // Default metadata for all pages
// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };



// // Export static params for Next.js to pre-render each locale
// export function generateStaticParams() {
//   return routing.locales.map((locale) => ({ locale }));
// }

// type AvailableLocale = (typeof routing.locales)[number];

// export default async function ContentLayout({
//   children,
//   params,
// }: {
//   children: React.ReactNode;
//   // `params` is declared as a Promise of the object.
//   params: Promise<{ locale: AvailableLocale }>;
// }) {
//   // Await it before using its properties.
//   const { locale } = await params;

//   // Validate the locale
//   if (!routing.locales.includes(locale)) {
//     notFound();
//   }

//   // Enable static rendering for this locale
//   setRequestLocale(locale);

//   return (
//     <div>
//         <div>group layout</div>
//         {children}
//     </div>
//   );
// }


import React from "react";
import { setRequestLocale } from "next-intl/server";
import { notFound } from "next/navigation";
import { routing } from "@/i18n/routing";
import type { Metadata } from "next";
import Header from "@/components/Header";
import Navbar from "@/components/Navbar";

// Default metadata for all pages
export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

// Export static params for Next.js to pre-render each locale
export function generateStaticParams() {
  return routing.locales.map((locale) => ({ locale }));
}

type AvailableLocale = (typeof routing.locales)[number];

export default async function ContentLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  // `params` is declared as a Promise of the object.
  params: Promise<{ locale: AvailableLocale }>;
}) {
  // Await the params before using its properties
  const { locale } = await params;

  // Validate the locale
  if (!routing.locales.includes(locale)) {
    notFound();
  }

  // Enable static rendering for this locale
  setRequestLocale(locale);

  return (
    // Centered container, max width 2560px
    <div className="relative mx-auto max-w-[1920px]">
      {/* Top header */}
      <Header />

      {/* Main layout: Left sticky nav + Right content */}
      <div className="flex">
        {/* Left: sticky navbar (1/6 viewport width) */}
        <div className="hidden md:block w-1/6">
          <Navbar />
        </div>

        {/* Right: main content area */}
        <main className="flex-1 py-12 px-10 md:px-20 font-light">
          {children}
        </main>
      </div>
    </div>
  );
}
